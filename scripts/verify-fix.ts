#!/usr/bin/env tsx
// scripts/verify-fix.ts
import { signToken, verifyToken } from '../lib/auth';

async function verifyFix() {
    console.log('üîß Verificando soluci√≥n completa...\n');

    // 1. Verificar variables de entorno
    console.log('1Ô∏è‚É£ Variables de entorno:');
    console.log('   NODE_ENV:', process.env.NODE_ENV);
    console.log('   JWT_SECRET from process.env:', !!process.env.JWT_SECRET);
    console.log('   JWT_SECRET length:', process.env.JWT_SECRET?.length || 0);
    console.log('');

    // 2. Test completo de auth
    console.log('2Ô∏è‚É£ Test de autenticaci√≥n:');
    const testPayload = { userId: 'test-user-verification' };

    try {
        const token = signToken(testPayload);
        console.log('   ‚úÖ Token generado correctamente');

        const decoded = verifyToken(token);
        console.log('   ‚úÖ Token verificado correctamente');
        console.log('   ‚úÖ UserId match:', decoded?.userId === testPayload.userId);

        // Test con el mismo token m√∫ltiples veces
        const decoded2 = verifyToken(token);
        console.log('   ‚úÖ Segunda verificaci√≥n:', !!decoded2);

    } catch (error) {
        console.error('   ‚ùå Error en test:', error);
    }

    console.log('');

    // 3. Verificar que la importaci√≥n funciona
    console.log('3Ô∏è‚É£ Verificando importaciones:');
    try {
        const authModule = require('../lib/auth');
        console.log('   ‚úÖ M√≥dulo auth importado');
        console.log('   ‚úÖ signToken disponible:', typeof authModule.signToken);
        console.log('   ‚úÖ verifyToken disponible:', typeof authModule.verifyToken);
    } catch (error) {
        console.error('   ‚ùå Error importando:', error);
    }

    console.log('');
    console.log('üéâ Verificaci√≥n completada');
    console.log('');
    console.log('üìã Pr√≥ximos pasos:');
    console.log('   1. Ejecutar el script de logout en el navegador');
    console.log('   2. Reiniciar servidor Next.js');
    console.log('   3. Registrarse/loguearse de nuevo');
    console.log('   4. Probar crear perfil emisor');
}

verifyFix().catch(console.error);